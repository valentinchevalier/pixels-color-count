!function(e){var t={};function n(a){if(t[a])return t[a].exports;var i=t[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:a})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){"use strict";e.exports=function(){return new Worker(n.p+"d3ac1b6300cb5ec669b6.worker.js")}},function(e,t,n){"use strict";function a(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,i;return t=e,i=[{key:"rgbaToCSS",value:function(e){var t=e.a/255;return"rgba(".concat(e.r,", ").concat(e.g,", ").concat(e.b,", ").concat(t.toFixed(2),")")}},{key:"rgbaToHex",value:function(e){return"#".concat(this.integerToHex(e.r)).concat(this.integerToHex(e.g)).concat(this.integerToHex(e.b)).concat(this.integerToHex(e.a))}},{key:"integerToHex",value:function(e){var t=e.toString(16);return 1===t.length?"0".concat(t):t}},{key:"hexToRgba",value:function(e){var t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i.exec(e);return t?{r:parseInt(t[1],16),g:parseInt(t[2],16),b:parseInt(t[3],16),a:parseInt(t[4],16)}:null}},{key:"euclideanDistanceSquare",value:function(e,t){for(var n=0,a=0;a<e.length;a+=1){var i=e[a]-t[a];n+=i*i}return n}},{key:"hexSimilarity",value:function(e,t){return this.rgbSimilarity(this.hexToRgba(e),this.hexToRgba(t))}},{key:"rgbSimilarity",value:function(e,t){this.RGB_MAX_DISTANCE_SQUARE||(this.RGB_MAX_DISTANCE_SQUARE=this.euclideanDistanceSquare([255,255,255,255],[0,0,0,0]));var n=this.euclideanDistanceSquare([e.r,e.g,e.b,e.a],[t.r,t.g,t.b,t.a]);return 1-Math.sqrt(n/this.RGB_MAX_DISTANCE_SQUARE)}}],(n=null)&&a(t.prototype,n),i&&a(t,i),e}();t.default=i},function(e,t,n){"use strict";function a(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Performance";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.performance=t}var t,n,i;return t=e,(n=[{key:"startExecution",value:function(){this.startTime=performance.now()}},{key:"stopExecution",value:function(){this.endTime=performance.now()}},{key:"getExecutionDuration",value:function(){return((this.endTime-this.startTime)/1e3).toFixed(3)}},{key:"log",value:function(){console.info("".concat(this.performance," : ").concat(this.getExecutionDuration()," secondes."))}}])&&a(t.prototype,n),i&&a(t,i),e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(n(2)),i=o(n(1)),r=o(n(0));function o(e){return e&&e.__esModule?e:{default:e}}function s(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var c=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,o;return t=e,o=[{key:"init",value:function(){var e=this;this.$body=document.querySelector("body"),this.$form=document.getElementById("analyseForm"),this.$inputImage=document.getElementById("uploadImage"),this.$inputThreshold=document.getElementById("threshold"),this.$imageDisplay=document.getElementById("display-image"),this.$imageAnalyse=document.getElementById("analyse-image"),this.$imageContainer=document.querySelector(".image-container"),this.$sizeBlock=document.getElementById("size-block"),this.$canvas=document.getElementById("canvas"),this.$progressBar=document.getElementById("progressBar"),this.$progressScan=document.querySelector(".progress-scan"),this.$results=document.querySelector(".resultats"),this.$form.addEventListener("submit",function(t){t.preventDefault(),e.threshold=e.$inputThreshold.value?Math.round(e.$inputThreshold.value):90,e.threshold<0||e.threshold>100||(e.threshold=e.threshold/100,e.startAnalysing())}),this.$inputImage.addEventListener("change",function(){e.loadImage()})}},{key:"startLoading",value:function(){this.$results.innerHTML="",this.$body.classList.add("is-loading"),this.setProgress(0)}},{key:"stopLoading",value:function(){this.$body.classList.remove("is-loading"),this.setProgress(0)}},{key:"setProgress",value:function(e){var t="".concat(e,"%");this.$progressBar.style.width=t,this.$progressBar.innerHTML=t,this.$progressScan.style.height=t}},{key:"startAnalysing",value:function(){var e=this;this.startLoading();var t=this.getImageData(),n=new r.default,i=new a.default("Temps de calcul");i.startExecution(),n.postMessage({imageData:t,similarityThreshold:this.threshold}),n.addEventListener("message",function(t){var r=t.data;if(r.type&&"progress"===r.type)e.setProgress(r.percentage);else{i.stopExecution(),i.log();var o=r.processedData,s=new a.default("Temps d'affichage des r√©sultats");s.startExecution(),e.displayResults(o),s.stopExecution(),s.log(),e.stopLoading(),n.terminate()}})}},{key:"getImageData",value:function(){var e=this.$canvas.getContext("2d"),t=this.$imageAnalyse,n=t.width,a=t.height;return this.$canvas.height=a,this.$canvas.width=n,e.drawImage(this.$imageAnalyse,0,0),e.getImageData(0,0,n,a).data}},{key:"displayResults",value:function(e){var t=document.createDocumentFragment();e.sort(function(e,t){return t.count-e.count}).splice(0,1e3).forEach(function(e){var n=i.default.rgbaToCSS(i.default.hexToRgba(e.color)),a=document.createElement("li");a.innerHTML='<div class="color-container"><span class="color" style="background-color: '.concat(n,';"></span><span class="color-text">').concat(n,"</span></div> ").concat(e.count),t.appendChild(a)}),this.$results.appendChild(t)}},{key:"loadImage",value:function(){var e=this,t=this.$inputImage.files;if(FileReader&&t&&t.length){var n=new FileReader;n.onload=function(){e.$imageDisplay.src=n.result,e.$imageAnalyse.src=n.result},n.readAsDataURL(t[0]),this.$imageAnalyse.onload=function(){e.displayImage(),e.displayImageSize()}}}},{key:"displayImage",value:function(){this.$imageContainer.classList.remove("hidden")}},{key:"displayImageSize",value:function(){this.$sizeBlock.innerHTML="Taille de l'image : ".concat(this.$imageAnalyse.height,"x").concat(this.$imageAnalyse.width," pixels.")}}],(n=null)&&s(t.prototype,n),o&&s(t,o),e}();t.default=c},function(e,t,n){"use strict";n(11);var a,i,r=(a=n(3))&&a.__esModule?a:{default:a};i=function(){r.default.init(),"serviceWorker"in navigator&&window.addEventListener("load",function(){navigator.serviceWorker.register("sw.js").then(function(e){console.log("SW registered: ",e)}).catch(function(e){console.log("SW registration failed: ",e)})})},(document.attachEvent?"complete"===document.readyState:"loading"!==document.readyState)?i():document.addEventListener("DOMContentLoaded",i)},,,,,,,function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,