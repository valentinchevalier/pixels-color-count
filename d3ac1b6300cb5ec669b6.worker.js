!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=(r=n(1))&&r.__esModule?r:{default:r};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,r=[{key:"getHexColorFromPixelsArray",value:function(e,t){return a.default.rgbaToHex({r:e[t],g:e[t+1],b:e[t+2],a:e[t+3]})}},{key:"countColors",value:function(e){for(var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},o=[],i=function(i){var u=t.getHexColorFromPixelsArray(e,i),c=o.find(function(e){return a.default.hexSimilarity(e.color,u)>=n});c?c.count+=1:o.push({color:u,count:1}),r(i/4)},u=0;u<e.length;u+=4)i(u);return o}}],(n=null)&&o(t.prototype,n),r&&o(t,r),e}();t.default=i},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,a;return t=e,a=[{key:"rgbaToCSS",value:function(e){var t=e.a/255;return"rgba(".concat(e.r,", ").concat(e.g,", ").concat(e.b,", ").concat(t.toFixed(2),")")}},{key:"rgbaToHex",value:function(e){return"#".concat(this.integerToHex(e.r)).concat(this.integerToHex(e.g)).concat(this.integerToHex(e.b)).concat(this.integerToHex(e.a))}},{key:"integerToHex",value:function(e){var t=e.toString(16);return 1===t.length?"0".concat(t):t}},{key:"hexToRgba",value:function(e){var t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i.exec(e);return t?{r:parseInt(t[1],16),g:parseInt(t[2],16),b:parseInt(t[3],16),a:parseInt(t[4],16)}:null}},{key:"euclideanDistanceSquare",value:function(e,t){for(var n=0,r=0;r<e.length;r+=1){var a=e[r]-t[r];n+=a*a}return n}},{key:"hexSimilarity",value:function(e,t){return this.rgbSimilarity(this.hexToRgba(e),this.hexToRgba(t))}},{key:"rgbSimilarity",value:function(e,t){this.RGB_MAX_DISTANCE_SQUARE||(this.RGB_MAX_DISTANCE_SQUARE=this.euclideanDistanceSquare([255,255,255,255],[0,0,0,0]));var n=this.euclideanDistanceSquare([e.r,e.g,e.b,e.a],[t.r,t.g,t.b,t.a]);return 1-Math.sqrt(n/this.RGB_MAX_DISTANCE_SQUARE)}}],(n=null)&&r(t.prototype,n),a&&r(t,a),e}();t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r);self.addEventListener("message",({data:e})=>{const{imageData:t,similarityThreshold:n}=e,r=t.length/4/100,o=a.a.countColors(t,n,e=>{e%r==0&&self.postMessage({type:"progress",percentage:e/r+1})});self.postMessage({processedData:o})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,